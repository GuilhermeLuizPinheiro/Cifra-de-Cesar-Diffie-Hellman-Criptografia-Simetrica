from socket import *
import random
import time

# Fun√ß√£o para verificar se um n√∫mero √© primo (Primo Fast)
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

# Par√¢metros p√∫blicos de Diffie-Hellman
p = 23  # N√∫mero primo
g = 5   # Base geradora

# Verifica√ß√£o se p √© primo
start_time = time.time()
if not is_prime(p):
    print(f"{p} n√£o √© primo! Escolha outro n√∫mero.")
    exit()
print(f"{p} √© primo!")
end_time = time.time()
print(f"Tempo de execu√ß√£o: {end_time - start_time:.6f} segundos")

# Fun√ß√£o para descriptografar a Cifra de C√©sar
def decifra_de_cesar(texto, deslocamento):
    descriptografado = ""
    for char in texto:
        if 32 <= ord(char) <= 126:  # Apenas caracteres imprim√≠veis
            novo_char = chr((ord(char) - 32 - deslocamento) % 95 + 32)
        else:
            novo_char = char  # Mant√©m caracteres inalterados
        descriptografado += novo_char
    return descriptografado

# Fun√ß√£o para converter texto para mai√∫sculas
def para_maiusculas(texto):
    return texto.upper()

# Configura√ß√£o do servidor
serverPort = 1700
serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.bind(("", serverPort))
serverSocket.listen(5)

print("üîµ Servidor esperando conex√µes...\n")

while True:
    connectionSocket, addr = serverSocket.accept()
    print(f"üîó Conex√£o estabelecida com {addr}")

    # Servidor gera sua chave privada e p√∫blica
    b = random.randint(1, p-1)  # Chave privada do servidor
    print(f"üîó Chave privada do servidor: { b }")
    B = (g ** b) % p  # Chave p√∫blica do servidor

    # Recebe a chave p√∫blica do cliente
    A = int(connectionSocket.recv(1024).decode())

    # Envia a chave p√∫blica do servidor para o cliente
    connectionSocket.send(str(B).encode())

    # Calcula a chave secreta compartilhada
    chave_simetrica = (A ** b) % p
    print(f"üîë Chave sim√©trica calculada pelo servidor: {chave_simetrica}")

    # Receber a mensagem criptografada do cliente
    mensagem_recebida = connectionSocket.recv(1024).decode()
    print(f"üì• Mensagem recebida criptografada: {mensagem_recebida}")

    # Descriptografar a mensagem
    mensagem_descriptografada = decifra_de_cesar(mensagem_recebida, chave_simetrica)
    print(f"üîì Mensagem descriptografada: {mensagem_descriptografada}")

    # Converter a mensagem para mai√∫sculas
    mensagem_maiusculas = para_maiusculas(mensagem_descriptografada)
    print(f"üî† Mensagem convertida para mai√∫sculas: {mensagem_maiusculas}")

    # Enviar a mensagem em mai√∫sculas de volta para o cliente
    connectionSocket.send(mensagem_maiusculas.encode())

    # Fecha a conex√£o com o cliente, mas mant√©m o servidor rodando
    connectionSocket.close()
    print("üîÑ Aguardando nova conex√£o...\n")
